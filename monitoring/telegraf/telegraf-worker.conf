[global_tags]
[agent]
  interval = "1m"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1m"
  flush_jitter = "10s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = ""
  omit_hostname = false

# use multiple [[inputs.ping]] sections so one unresolvable hostname does not prevent
# all other ping data to be gathered
[[inputs.ping]]
  urls = [ "openqa.suse.de" ]
  count = 1
  ping_interval = 1.0
  timeout = 1.0
  deadline = 10
{% for required_network in pillar['workerconf']['required_external_networks'] | default([]) %}
{% if ('exclude_on_regex' not in required_network) or not (grains['host'] is match(required_network['exclude_on_regex'])) %}
{% if "check_url" in required_network %}
[[inputs.http_response]]
  urls = [ '{{ required_network["check_url"] }}' ]
  response_timeout = "20s"
  interval = "1m"
{% else %}
[[inputs.ping]]
  urls = ['{{ required_network['host'] }}']
  count = 1
  ping_interval = 10.0
  timeout = 1.0
  deadline = 10
  [inputs.ping.tags]
    network="external"
{% endif %}
{% endif %}
{% endfor %}

[[inputs.http_response]]
  urls = [ "https://openqa.suse.de/health" ]
  response_timeout = "20s"
  interval = "10m"

[[inputs.http]]
  urls = [ "http://localhost:9530/influxdb/minion" ]
  data_format = "influx"
  timeout = "40s"
  interval = "1m"

{% for service in ['sshd','telegraf','salt-minion','openqa-worker-cacheservice-minion','openqa-worker-cacheservice'] %}
[[inputs.procstat]]
  cgroup = "systemd/system.slice/{{ service }}.service"
{% endfor %}

{% for i in range(pillar['workerconf'].get(grains['host'], {}).get('numofworkers', 0)) %}
[[inputs.procstat]]
  cgroup = "systemd/openqa.slice/openqa-worker.slice/openqa-worker-auto-restart@{{ i+1 }}.service"
{% endfor %}
